#!/bin/bash

VERSION="1.0.0"
CONFIG_DIR="$HOME/.boogiewoogie"
CONFIG_FILE="$CONFIG_DIR/profiles.conf"
SSH_CONFIG_FILE="$HOME/.ssh/config"

# Create config directory if it doesn't exist
mkdir -p "$CONFIG_DIR"
touch "$CONFIG_FILE"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

function show_help() {
    echo "BoogieWoogie - Git Profile Manager v${VERSION}"
    echo "Manage multiple Git profiles with SSH keys"
    echo
    echo "Usage:"
    echo "  $(basename "$0") add                     - Add a new Git profile"
    echo "  $(basename "$0") list                    - List all profiles"
    echo "  $(basename "$0") switch <profile-name>   - Switch to a specific profile"
    echo "  $(basename "$0") remove <profile-name>   - Remove a profile"
    echo "  $(basename "$0") current                 - Show current profile"
    echo "  $(basename "$0") version                 - Show version information"
    echo "  $(basename "$0") help                    - Show this help message"
    echo
    exit 0
}

function show_version() {
    echo "BoogieWoogie v${VERSION}"
    exit 0
}

function add_profile() {
    echo "Adding a new Git profile"
    echo "----------------------"
    
    # Get profile details
    read -p "Enter profile name (e.g., personal, work): " profile_name
    read -p "Enter Git user name: " git_name
    read -p "Enter Git email: " git_email
    read -p "Enter Git host (e.g., github.com): " git_host
    read -p "Enter SSH key path (default: $HOME/.ssh/id_ed25519_${profile_name}): " ssh_key
    
    # Set default SSH key path if none provided
    ssh_key=${ssh_key:-"$HOME/.ssh/id_ed25519_${profile_name}"}
    
    # Check if profile already exists
    if grep -q "^${profile_name}:" "$CONFIG_FILE"; then
        echo "Error: Profile '${profile_name}' already exists!"
        exit 1
    fi
    
    # Save profile
    echo "${profile_name}:${git_name}:${git_email}:${git_host}:${ssh_key}" >> "$CONFIG_FILE"
    
    # Create alias suggestion
    alias_cmd="alias git-${profile_name}='boogiewoogie switch ${profile_name}'"
    
    echo -e "\n${GREEN}Profile '${profile_name}' added successfully!${NC}"
    echo -e "${BLUE}Add this to your ~/.bashrc or ~/.zshrc to create an alias:${NC}"
    echo "$alias_cmd"
    
    # Offer to generate SSH key if it doesn't exist
    if [ ! -f "$ssh_key" ]; then
        read -p "SSH key doesn't exist. Would you like to generate it now? (y/n): " generate_key
        if [[ $generate_key =~ ^[Yy]$ ]]; then
            ssh-keygen -t ed25519 -C "$git_email" -f "$ssh_key"
            echo -e "\n${BLUE}Add this public key to your Git host ($git_host):${NC}"
            cat "${ssh_key}.pub"
        fi
    fi
}

function list_profiles() {
    echo "Available Git Profiles"
    echo "--------------------"
    if [ ! -s "$CONFIG_FILE" ]; then
        echo "No profiles found. Add one using: $(basename "$0") add"
        exit 0
    fi
    
    current_name=$(git config --global user.name)
    current_email=$(git config --global user.email)
    
    while IFS=: read -r name full_name email host key; do
        if [ -n "$name" ]; then
            if [ "$full_name" = "$current_name" ] && [ "$email" = "$current_email" ]; then
                echo -e "${GREEN}* ${name}${NC} (${full_name} <${email}>) - ${host}"
            else
                echo "  ${name} (${full_name} <${email}>) - ${host}"
            fi
        fi
    done < "$CONFIG_FILE"
}

function switch_profile() {
    profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        echo "Error: Profile name required"
        echo "Usage: $(basename "$0") switch <profile-name>"
        exit 1
    fi
    
    # Find profile in config
    profile_line=$(grep "^${profile_name}:" "$CONFIG_FILE")
    
    if [ -z "$profile_line" ]; then
        echo "Error: Profile '${profile_name}' not found!"
        exit 1
    fi
    
    # Parse profile data
    IFS=: read -r name full_name email host key <<< "$profile_line"
    
    # Check if SSH key exists
    if [ ! -f "$key" ]; then
        echo "Error: SSH key not found: $key"
        echo "Run '$(basename "$0") add' to create a new profile with SSH key"
        exit 1
    fi
    
    # Update Git config
    git config --global user.name "$full_name"
    git config --global user.email "$email"
    
    # Update SSH config
    update_ssh_config
    
    # Restart SSH agent with new key
    echo "Updating SSH agent..."
    if ! ssh-add -D >/dev/null 2>&1; then
        echo "Warning: Failed to remove identities from SSH agent"
    fi
    
    if ! eval "$(ssh-agent -s)" >/dev/null 2>&1; then
        echo "Error: Failed to start SSH agent"
        exit 1
    fi
    
    if ! ssh-add "$key" >/dev/null 2>&1; then
        echo "Error: Failed to add SSH key to agent: $key"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Switched to profile: ${profile_name}${NC}"
    echo "üîê Name: $full_name"
    echo "üìß Email: $email"
    echo "üîë SSH Key: $key"
    
    # Verify Git host connection
    echo -e "\nTesting connection to $host..."
    if ! ssh -T "git@$host" 2>&1 | grep -q "success"; then
        echo -e "${BLUE}Note: If this is your first time connecting to $host, you may need to verify the host key${NC}"
    fi
}

function update_ssh_config() {
    # Backup existing SSH config if it exists
    if [ -f "$SSH_CONFIG_FILE" ]; then
        backup_file="${SSH_CONFIG_FILE}.$(date +%Y%m%d_%H%M%S).bak"
        cp "$SSH_CONFIG_FILE" "$backup_file"
        echo "üìë Backed up existing SSH config to: $backup_file"
    fi
    
    # Create SSH config header
    cat > "$SSH_CONFIG_FILE" <<EOF
# Generated by boogiewoogie
# Last updated: $(date)

EOF
    
    # Add each profile's SSH config
    while IFS=: read -r name full_name email host key; do
        if [ -n "$name" ]; then
            cat >> "$SSH_CONFIG_FILE" <<EOF
Host $host
    HostName $host
    User git
    IdentityFile $key
    IdentitiesOnly yes

EOF
        fi
    done < "$CONFIG_FILE"
    
    chmod 600 "$SSH_CONFIG_FILE"
    echo "üîß Updated SSH config"
}

function remove_profile() {
    profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        echo "Error: Profile name required"
        echo "Usage: $(basename "$0") remove <profile-name>"
        exit 1
    fi
    
    if grep -q "^${profile_name}:" "$CONFIG_FILE"; then
        sed -i .bak "/^${profile_name}:/d" "$CONFIG_FILE"
        echo -e "${GREEN}Profile '${profile_name}' removed successfully!${NC}"
        update_ssh_config
    else
        echo "Error: Profile '${profile_name}' not found!"
        exit 1
    fi
}

function show_current() {
    current_name=$(git config --global user.name)
    current_email=$(git config --global user.email)
    
    if [ -z "$current_name" ] || [ -z "$current_email" ]; then
        echo "No Git profile is currently set"
        exit 0
    fi
    
    while IFS=: read -r name full_name email host key; do
        if [ "$full_name" = "$current_name" ] && [ "$email" = "$current_email" ]; then
            echo -e "${GREEN}Current profile: ${name}${NC}"
            echo "üîê Name: $full_name"
            echo "üìß Email: $email"
            echo "üåê Host: $host"
            echo "üîë SSH Key: $key"
            exit 0
        fi
    done < "$CONFIG_FILE"
    
    echo "Current Git config:"
    echo "Name: $current_name"
    echo "Email: $current_email"
    echo "(This configuration doesn't match any saved profile)"
}

# Main command processing
case "$1" in
    "add")
        add_profile
        ;;
    "list")
        list_profiles
        ;;
    "switch")
        switch_profile "$2"
        ;;
    "remove")
        remove_profile "$2"
        ;;
    "current")
        show_current
        ;;
    "version")
        show_version
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        echo "Run '$(basename "$0") help' for usage information"
        exit 1
        ;;
esac 